rules:
  - match: "**/resources/js/Pages/**/*.tsx"
    apply:
      framework: "React, TypeScript, Inertia"
      guidelines:
        - "Use TypeScript for type safety and maintainability."
        - "Follow PascalCase for component names."
        - "Integrate Inertia by correctly mapping backend routes and frontend pages."
        - "Ensure proper usage of hooks like `useEffect` and `useState` for React components."
        - "Use ES6+ syntax for modern JavaScript coding."
        - "Optimize components for server-side rendering (SSR) using Inertia conventions."
        - "Validate all props using TypeScript interfaces or types."
        - "Ensure secure handling of dynamic data passed from the backend."

  - match: "**/resources/views/**/*.blade.php"
    apply:
      framework: "Laravel Blade"
      guidelines:
        - "Minimize inline logic in Blade templates; prefer moving it to controllers."
        - "Use @section, @yield, and @include for clean layout management."
        - "Always escape output using {{ }} unless explicitly intended."
        - "Leverage Laravel's built-in directives (e.g., @auth, @guest, @foreach) for readability."
        - "Avoid duplication of code by reusing Blade components where possible."

  - match: "**/public/build/**/*.js"
    apply:
      framework: "JavaScript"
      guidelines:
        - "Ensure the files are generated through the Vite build process; do not modify directly."
        - "Optimize files for production with minification and tree shaking."
        - "Verify that large assets are gzip or Brotli compressed for performance."
        - "Ensure JavaScript is ES6+ compliant."

  - match: "**/bootstrap/ssr/**/*.js"
    apply:
      framework: "Node.js, Inertia SSR"
      guidelines:
        - "Ensure the SSR scripts are performant and integrate seamlessly with Laravel routes."
        - "Configure Node.js to properly handle SSR hydration for React components."
        - "Utilize server-side caching for improved response times."
        - "Validate that the manifest file is correctly referenced for asset loading."

  - match: "**/app/**/*.php"
    apply:
      framework: "Laravel 11, PHP 8.2, Inertia"
      guidelines:
        - "Adhere to PSR-12 coding standards for PHP."
        - "Use native PHP 8.2 features like readonly properties and intersection types where applicable."
        - "Implement strict typing across all classes and methods."
        - "Leverage dependency injection for cleaner, testable code."
        - "Validate request inputs using Laravel Form Requests."
        - "Use Laravel's Query Builder or Eloquent ORM for database operations."
        - "Write reusable, modular code for services, controllers, and models."
        - "Always return Inertia responses in controllers (e.g., `Inertia::render('ComponentName')`)."
        - "Pass data to Inertia views using arrays or Laravel resources to ensure clean API responses."
        - "Keep controller methods concise; delegate complex logic to services or helpers."

  - match: "**/routes/**/*.php"
    apply:
      framework: "Laravel 11, Inertia"
      guidelines:
        - "Always define routes to return Inertia pages for frontend views."
        - "Use the `Inertia` facade to render frontend components (e.g., `Inertia::render('Dashboard')`)."
        - "Group related routes using route groups and middleware for better organization."
        - "Leverage route bindings for cleaner, type-safe routes."
        - "Document each route with comments for clarity."
        - "For API endpoints, use `Route::apiResource` for RESTful controllers, and avoid mixing with Inertia routes."
        - "Avoid defining Blade views directly for routes; use Inertia pages instead."

  - match: "**/database/migrations/**/*.php"
    apply:
      framework: "Laravel Migrations"
      guidelines:
        - "Always use `timestamps()` for tables to add `created_at` and `updated_at` columns."
        - "Use `softDeletes()` if the table supports soft deletion to include `deleted_at` column."
        - "When creating relationships, ensure foreign keys are properly indexed using `foreignId` or `unsignedBigInteger`."
        - "Use meaningful column names for relationships (e.g., `user_id`, `post_id`)."
        - "For audit purposes, consider adding `created_by` and `updated_by` fields when required."
        - "Avoid using `nullableTimestamps()` unless explicitly needed."
        - "Keep migrations atomic; each migration should handle one specific change."

general:
  - "Maintain consistent code formatting across all files."
  - "Use environment variables for sensitive data and configuration."
  - "Apply DRY (Don't Repeat Yourself) principles to improve reusability."
  - "Write meaningful comments for custom or complex logic."
  - "Test all code thoroughly for Laravel, PHP 8.2, Inertia, and React compatibility."
  - "Ensure accessibility standards (WCAG) in all frontend components."
  - "Ensure `composer.json` is up-to-date, removing unused dependencies and adding relevant packages for backend features."
  - "Check `package.json` to ensure frontend dependencies are current and no unused libraries are included."
  - "Always use `tailwind.config.js` for extending or customizing Tailwind CSS classes."
  - "Use Tailwind's utility-first classes for styling; avoid inline styles unless necessary."
  - "Structure CSS using semantic naming with Tailwind's component, utility, and responsive design best practices."
  - "Test responsive layouts thoroughly across breakpoints defined in `tailwind.config.js`."
  - "Optimize CSS for production by purging unused classes with Tailwind's built-in purge feature in the `vite.config.js` file."